// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  thoughts Thoughts[]
  likes    Like[]
  comments Comment[]

  followers User[] @relation(name: "Followers")
  follows   User[] @relation(name: "Followers")

  notifications Notification[] @relation(name: "sender")

  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Thoughts {
  id        String    @id @default(cuid())
  userId    String
  title     String?   @db.Text
  content   String    @db.LongText
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]

  @@index([userId])
}

model Like {
  userId    String
  thoughtId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  thought   Thoughts @relation(fields: [thoughtId], references: [id], onDelete: Cascade)

  @@id([userId, thoughtId])
  @@index([userId])
  @@index([thoughtId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  thoughtId String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  thought   Thoughts @relation(fields: [thoughtId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([thoughtId])
}

model Notification {
  id        String  @id @default(cuid())
  userId    String
  type      String
  senderId  String
  thoughtId String?
  commentId String?
  seen      Boolean @default(false)

  sender    User     @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
